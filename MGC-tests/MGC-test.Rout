
R version 3.4.4 (2018-03-15) -- "Someone to Lean On"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> #!/usr/bin/env Rscript
> library(mgc)
> library(reshape2)
> library(ggplot2)
> plot_sim_func <- function(X, Y, Xf, Yf, name, geom='line') {
+   if (!is.null(dim(Y))) {
+     Y <- Y[, 1]
+     Yf <- Yf[, 1]
+   }
+   if (geom == 'points') {
+     funcgeom <- geom_point
+   } else {
+     funcgeom <- geom_line
+   }
+   data <- data.frame(x1=X[,1], y=Y)
+   data_func <- data.frame(x1=Xf[,1], y=Yf)
+   ggplot(data, aes(x=x1, y=y)) +
+     funcgeom(data=data_func, aes(x=x1, y=y), color='red', size=3) +
+     geom_point() +
+     xlab("x") +
+     ylab("y") +
+     ggtitle(name) +
+     theme_bw()
+ }
> plot_mtx <- function(Dx, main.title="Local Correlation Map", xlab.title="# X Neighbors", ylab.title="# Y Neighbors") {
+   data <- melt(Dx)
+   ggplot(data, aes(x=Var1, y=Var2, fill=value)) +
+     geom_tile() +
+     scale_fill_gradientn(name="l-corr",
+                          colours=c("#f2f0f7", "#cbc9e2", "#9e9ac8", "#6a51a3"),
+                          limits=c(min(Dx), max(Dx))) +
+     xlab(xlab.title) +
+     ylab(ylab.title) +
+     theme_bw() +
+     ggtitle(main.title)
+ }
> 
> set.seed(12345)
> dat <- read.csv("KHop_Data.csv", header = TRUE)
> dat <- array(as.numeric(unlist(dat)), dim=c(97,97))
> dat <- dat[,-1]
> maxval <- 0
> Xmax <- 0
> Ymax <- 0
> X <- 1
> 
> zeromat <- matrix(1:96, nrow = 96, ncol=4)
> mgctests <- array(0L, dim(zeromat))
> for (Y in 2:97) {
+     Xdat <- dat[X,]
+     YDat <- dat[Y,]
+     res <- mgc.test(Xdat,YDat, rep=20)
+     val <- res$statMGC
+     p_val <- res$pMGC
+     scale <- res$optimalScale
+     print(scale)
+     plot_mtx(res$localCorr, main.title="Local Correlation Map")
+     if ( val > maxval){
+         maxval <- val
+         Xmax <- X
+         Ymax <- Y
+     }
+     mgctests[Y-1,1] = val
+     mgctests[Y-1,2] = X
+     mgctests[Y-1,3] = Y
+     mgctests[Y-1,4] = p_val
+ }
$x
[1] 70

$y
[1] 61

$x
[1] 70

$y
[1] 57

$x
[1] 70

$y
[1] 73

$x
[1] 70

$y
[1] 60

$x
[1] 70

$y
[1] 70

$x
[1] 70

$y
[1] 65

$x
[1] 70

$y
[1] 55

$x
[1] 70

$y
[1] 70

$x
[1] 70

$y
[1] 73

$x
[1] 70

$y
[1] 65

$x
[1] 70

$y
[1] 63

$x
[1] 70

$y
[1] 58

$x
[1] 70

$y
[1] 62

$x
[1] 70

$y
[1] 62

$x
[1] 70

$y
[1] 61

$x
[1] 70

$y
[1] 68

$x
[1] 70

$y
[1] 65

$x
[1] 70

$y
[1] 60

$x
[1] 70

$y
[1] 71

$x
[1] 70

$y
[1] 64

$x
[1] 70

$y
[1] 54

$x
[1] 70

$y
[1] 68

$x
[1] 70

$y
[1] 59

$x
[1] 70

$y
[1] 62

$x
[1] 70

$y
[1] 60

$x
[1] 70

$y
[1] 61

$x
[1] 70

$y
[1] 64

$x
[1] 70

$y
[1] 54

$x
[1] 70

$y
[1] 61

$x
[1] 70

$y
[1] 72

$x
[1] 70

$y
[1] 72

$x
[1] 70

$y
[1] 57

$x
[1] 70

$y
[1] 66

$x
[1] 70

$y
[1] 63

$x
[1] 70

$y
[1] 62

$x
[1] 70

$y
[1] 71

$x
[1] 70

$y
[1] 68

$x
[1] 70

$y
[1] 68

$x
[1] 70

$y
[1] 68

$x
[1] 70

$y
[1] 75

$x
[1] 70

$y
[1] 66

$x
[1] 70

$y
[1] 54

$x
[1] 70

$y
[1] 59

$x
[1] 70

$y
[1] 59

$x
[1] 70

$y
[1] 63

$x
[1] 61

$y
[1] 47

$x
[1] 70

$y
[1] 58

$x
[1] 70

$y
[1] 67

$x
[1] 70

$y
[1] 60

$x
[1] 70

$y
[1] 57

$x
[1] 70

$y
[1] 62

$x
[1] 70

$y
[1] 69

$x
[1] 70

$y
[1] 69

$x
[1] 70

$y
[1] 65

$x
[1] 70

$y
[1] 54

$x
[1] 70

$y
[1] 73

$x
[1] 70

$y
[1] 63

$x
[1] 70

$y
[1] 58

$x
[1] 70

$y
[1] 58

$x
[1] 70

$y
[1] 72

$x
[1] 70

$y
[1] 65

$x
[1] 70

$y
[1] 68

$x
[1] 70

$y
[1] 64

$x
[1] 70

$y
[1] 59

$x
[1] 70

$y
[1] 69

$x
[1] 70

$y
[1] 57

$x
[1] 70

$y
[1] 57

$x
[1] 70

$y
[1] 58

$x
[1] 70

$y
[1] 61

$x
[1] 70

$y
[1] 61

$x
[1] 70

$y
[1] 54

$x
[1] 70

$y
[1] 56

$x
[1] 70

$y
[1] 69

$x
[1] 70

$y
[1] 74

$x
[1] 70

$y
[1] 56

$x
[1] 70

$y
[1] 71

$x
[1] 70

$y
[1] 66

$x
[1] 70

$y
[1] 58

$x
[1] 70

$y
[1] 68

$x
[1] 70

$y
[1] 62

$x
[1] 70

$y
[1] 72

$x
[1] 70

$y
[1] 62

$x
[1] 70

$y
[1] 54

$x
[1] 70

$y
[1] 65

$x
[1] 70

$y
[1] 60

$x
[1] 70

$y
[1] 64

$x
[1] 70

$y
[1] 65

$x
[1] 70

$y
[1] 55

$x
[1] 70

$y
[1] 63

$x
[1] 70

$y
[1] 65

$x
[1] 70

$y
[1] 59

$x
[1] 70

$y
[1] 55

$x
[1] 70

$y
[1] 70

$x
[1] 70

$y
[1] 56

$x
[1] 70

$y
[1] 66

$x
[1] 70

$y
[1] 64

> #Xdat = dat[1,]
> #YDat = dat[2,]
> #res <- mgc.test(Xdat, YDat, rep=20)
> #maxval = res$statMGC
> 
> print(mgctests)
           [,1] [,2] [,3] [,4]
 [1,] 0.9470276    1    2    0
 [2,] 0.8850615    1    3    0
 [3,] 0.8816034    1    4    0
 [4,] 0.8500018    1    5    0
 [5,] 0.8569294    1    6    0
 [6,] 0.8924522    1    7    0
 [7,] 0.9025913    1    8    0
 [8,] 0.9440394    1    9    0
 [9,] 0.8580458    1   10    0
[10,] 0.9132448    1   11    0
[11,] 0.8510028    1   12    0
[12,] 0.9013904    1   13    0
[13,] 0.8246345    1   14    0
[14,] 0.8092523    1   15    0
[15,] 0.7977215    1   16    0
[16,] 0.7109082    1   17    0
[17,] 0.8430163    1   18    0
[18,] 0.8891639    1   19    0
[19,] 0.8988549    1   20    0
[20,] 0.8760761    1   21    0
[21,] 0.7819531    1   22    0
[22,] 0.8357129    1   23    0
[23,] 0.8835997    1   24    0
[24,] 0.6444186    1   25    0
[25,] 0.9053236    1   26    0
[26,] 0.8769983    1   27    0
[27,] 0.7794358    1   28    0
[28,] 0.8842969    1   29    0
[29,] 0.8446418    1   30    0
[30,] 0.9072088    1   31    0
[31,] 0.8665409    1   32    0
[32,] 0.8510120    1   33    0
[33,] 0.9346395    1   34    0
[34,] 0.8589308    1   35    0
[35,] 0.8543634    1   36    0
[36,] 0.8539721    1   37    0
[37,] 0.9032400    1   38    0
[38,] 0.8211674    1   39    0
[39,] 0.8155316    1   40    0
[40,] 0.8424348    1   41    0
[41,] 0.8153448    1   42    0
[42,] 0.8147513    1   43    0
[43,] 0.8450107    1   44    0
[44,] 0.8930577    1   45    0
[45,] 0.8913427    1   46    0
[46,] 0.8894841    1   47    0
[47,] 0.8430020    1   48    0
[48,] 0.9154814    1   49    0
[49,] 0.9105906    1   50    0
[50,] 0.9070544    1   51    0
[51,] 0.8585207    1   52    0
[52,] 0.9220327    1   53    0
[53,] 0.8723218    1   54    0
[54,] 0.8767370    1   55    0
[55,] 0.9076629    1   56    0
[56,] 0.8621777    1   57    0
[57,] 0.8891532    1   58    0
[58,] 0.8428909    1   59    0
[59,] 0.8637427    1   60    0
[60,] 0.8311468    1   61    0
[61,] 0.8692551    1   62    0
[62,] 0.9017509    1   63    0
[63,] 0.8845643    1   64    0
[64,] 0.8262933    1   65    0
[65,] 0.8811000    1   66    0
[66,] 0.8725537    1   67    0
[67,] 0.8081099    1   68    0
[68,] 0.8897472    1   69    0
[69,] 0.8740372    1   70    0
[70,] 0.8282464    1   71    0
[71,] 0.7903701    1   72    0
[72,] 0.8806751    1   73    0
[73,] 0.8353172    1   74    0
[74,] 0.8343230    1   75    0
[75,] 0.8359003    1   76    0
[76,] 0.8652882    1   77    0
[77,] 0.8875968    1   78    0
[78,] 0.7054185    1   79    0
[79,] 0.8354289    1   80    0
[80,] 0.8494179    1   81    0
[81,] 0.8882929    1   82    0
[82,] 0.8783138    1   83    0
[83,] 0.8698242    1   84    0
[84,] 0.8286606    1   85    0
[85,] 0.8704553    1   86    0
[86,] 0.8621530    1   87    0
[87,] 0.8571042    1   88    0
[88,] 0.8621961    1   89    0
[89,] 0.7815807    1   90    0
[90,] 0.8988425    1   91    0
[91,] 0.8990168    1   92    0
[92,] 0.8827983    1   93    0
[93,] 0.9178507    1   94    0
[94,] 0.8451717    1   95    0
[95,] 0.8963899    1   96    0
[96,] 0.8932538    1   97    0
> write.csv(mgctests, file = 'mgc-test-stats.csv')
> 
> proc.time()
   user  system elapsed 
117.440   0.056 117.473 
